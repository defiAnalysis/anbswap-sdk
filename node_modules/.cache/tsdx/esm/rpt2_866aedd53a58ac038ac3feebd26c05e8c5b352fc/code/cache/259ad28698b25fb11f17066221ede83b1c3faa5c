{"code":"import JSBI from 'jsbi';\r\nimport { ChainId, SolidityType } from '../constants';\r\nimport { validateSolidityTypeInstance } from '../utils';\r\nconst CurrencyName = {\r\n    [ChainId.MAINNET]: 'ETH',\r\n    [ChainId.ROPSTEN]: 'ETH',\r\n    [ChainId.RINKEBY]: 'ETH',\r\n    [ChainId.GÃ–RLI]: 'ETH',\r\n    [ChainId.KOVAN]: 'ETH',\r\n    [ChainId.BIANMAIN]: 'BNB',\r\n    [ChainId.BIANTEST]: 'BNB',\r\n    [ChainId.HECOMAIN]: 'HT',\r\n    [ChainId.HECOTEST]: 'HT',\r\n    [ChainId.OKTEST]: 'OKT'\r\n};\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n    /**\r\n     * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n     * @param decimals decimals of the currency\r\n     * @param symbol symbol of the currency\r\n     * @param name of the currency\r\n     */\r\n    constructor(decimals, symbol, name) {\r\n        validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8);\r\n        this.decimals = decimals;\r\n        this.symbol = symbol;\r\n        this.name = name;\r\n    }\r\n    toDisplayableSymbol(chainId) {\r\n        if (this !== ETHER)\r\n            throw new Error('Not currency instance');\r\n        return CurrencyName[chainId];\r\n    }\r\n}\r\n/**\r\n * The only instance of the base class `Currency`.\r\n */\r\nCurrency.ETHER = new Currency(18, '(Currency)', 'Currency');\r\nconst ETHER = Currency.ETHER;\r\nexport { ETHER };\r\n//# sourceMappingURL=currency.js.map","references":["/Users/hayden/dev/contract/anbswap-sdk/node_modules/jsbi/jsbi.d.ts","/Users/hayden/dev/contract/anbswap-sdk/src/constants.ts","/Users/hayden/dev/contract/anbswap-sdk/src/utils.ts"],"map":"{\"version\":3,\"file\":\"currency.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/entities/currency.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,IAAI,MAAM,MAAM,CAAA;AAEvB,OAAO,EAAE,OAAO,EAAC,YAAY,EAAE,MAAM,cAAc,CAAA;AACnD,OAAO,EAAE,4BAA4B,EAAE,MAAM,UAAU,CAAA;AAEvD,MAAM,YAAY,GAAG;IACnB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK;IACxB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK;IACxB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK;IACxB,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,KAAK;IACtB,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,KAAK;IACtB,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK;IACzB,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK;IACzB,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,IAAI;IACxB,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,IAAI;IACxB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,KAAK;CACxB,CAAA;AACD;;;;GAIG;AACH,MAAM,OAAO,QAAQ;IAUnB;;;;;OAKG;IACH,YAAsB,QAAgB,EAAE,MAAe,EAAE,IAAa;QACpE,4BAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,YAAY,CAAC,KAAK,CAAC,CAAA;QAEvE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;IAClB,CAAC;IAED,mBAAmB,CAAC,OAAgB;QAClC,IAAI,IAAI,KAAK,KAAK;YAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAA;QAC5D,OAAO,YAAY,CAAC,OAAO,CAAC,CAAA;IAC9B,CAAC;;AAtBD;;GAEG;AACoB,cAAK,GAAa,IAAI,QAAQ,CAAC,EAAE,EAAE,YAAY,EAAE,UAAU,CAAC,CAAA;AAsBrF,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAA;AAC5B,OAAO,EAAE,KAAK,EAAE,CAAA\"}","dts":{"name":"/Users/hayden/dev/contract/anbswap-sdk/src/entities/currency.d.ts","writeByteOrderMark":false,"text":"import { ChainId } from '../constants';\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport declare class Currency {\r\n    readonly decimals: number;\r\n    readonly symbol?: string;\r\n    readonly name?: string;\r\n    /**\r\n     * The only instance of the base class `Currency`.\r\n     */\r\n    static readonly ETHER: Currency;\r\n    /**\r\n     * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n     * @param decimals decimals of the currency\r\n     * @param symbol symbol of the currency\r\n     * @param name of the currency\r\n     */\r\n    protected constructor(decimals: number, symbol?: string, name?: string);\r\n    toDisplayableSymbol(chainId: ChainId): string;\r\n}\r\ndeclare const ETHER: Currency;\r\nexport { ETHER };\r\n"}}
