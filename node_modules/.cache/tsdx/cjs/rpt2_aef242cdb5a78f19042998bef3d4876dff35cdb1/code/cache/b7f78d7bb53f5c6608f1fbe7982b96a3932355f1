{"code":"import { Contract } from '@ethersproject/contracts';\r\nimport { getNetwork } from '@ethersproject/networks';\r\nimport { getDefaultProvider } from '@ethersproject/providers';\r\nimport { TokenAmount } from './entities/fractions/tokenAmount';\r\nimport { Pair } from './entities/pair';\r\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json';\r\nimport invariant from 'tiny-invariant';\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport class Fetcher {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    constructor() { }\r\n    /**\r\n     * Fetches information about a pair and constructs a pair from the given two tokens.\r\n     * @param tokenA first token\r\n     * @param tokenB second token\r\n     * @param provider the provider to use to fetch the data\r\n     */\r\n    static async fetchPairData(tokenA, tokenB, provider = getDefaultProvider(getNetwork(tokenA.chainId))) {\r\n        invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID');\r\n        const address = await Pair.getAddress(tokenA, tokenB);\r\n        const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves();\r\n        const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\r\n        return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]));\r\n    }\r\n}\r\n//# sourceMappingURL=fetcher.js.map","references":["/Users/hayden/dev/contract/anbswap-sdk/node_modules/@ethersproject/contracts/lib/index.d.ts","/Users/hayden/dev/contract/anbswap-sdk/node_modules/@ethersproject/networks/lib/index.d.ts","/Users/hayden/dev/contract/anbswap-sdk/node_modules/@ethersproject/providers/lib/index.d.ts","/Users/hayden/dev/contract/anbswap-sdk/src/entities/fractions/tokenAmount.ts","/Users/hayden/dev/contract/anbswap-sdk/src/entities/pair.ts","/Users/hayden/dev/contract/anbswap-sdk/node_modules/@uniswap/v2-core/build/IUniswapV2Pair.json","/Users/hayden/dev/contract/anbswap-sdk/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/hayden/dev/contract/anbswap-sdk/src/entities/token.ts"],"map":"{\"version\":3,\"file\":\"fetcher.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/fetcher.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAA;AACnD,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAA;AACpD,OAAO,EAAE,kBAAkB,EAAE,MAAM,0BAA0B,CAAA;AAC7D,OAAO,EAAE,WAAW,EAAE,MAAM,kCAAkC,CAAA;AAC9D,OAAO,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAA;AACtC,OAAO,cAAc,MAAM,4CAA4C,CAAA;AACvE,OAAO,SAAS,MAAM,gBAAgB,CAAA;AAGtC;;GAEG;AACH,MAAM,OAAgB,OAAO;IAC3B;;OAEG;IACH,gBAAwB,CAAC;IAGzB;;;;;OAKG;IACI,MAAM,CAAC,KAAK,CAAC,aAAa,CAC/B,MAAa,EACb,MAAa,EACb,QAAQ,GAAG,kBAAkB,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAEzD,SAAS,CAAC,MAAM,CAAC,OAAO,KAAK,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,CAAA;QACxD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;QAErD,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,GAAG,MAAM,IAAI,QAAQ,CAAC,OAAO,EAAE,cAAc,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAA;QACtG,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;QAC7F,OAAO,IAAI,IAAI,CAAC,IAAI,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC7F,CAAC;CACF\"}","dts":{"name":"/Users/hayden/dev/contract/anbswap-sdk/src/fetcher.d.ts","writeByteOrderMark":false,"text":"import { Pair } from './entities/pair';\r\nimport { Token } from './entities/token';\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport declare abstract class Fetcher {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    private constructor();\r\n    /**\r\n     * Fetches information about a pair and constructs a pair from the given two tokens.\r\n     * @param tokenA first token\r\n     * @param tokenB second token\r\n     * @param provider the provider to use to fetch the data\r\n     */\r\n    static fetchPairData(tokenA: Token, tokenB: Token, provider?: import(\"@ethersproject/providers\").BaseProvider): Promise<Pair>;\r\n}\r\n"}}
